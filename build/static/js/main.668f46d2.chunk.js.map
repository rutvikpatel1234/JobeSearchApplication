{"version":3,"sources":["useFetchJobs.js","Job.js","JobsPagination.js","SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","BASE_URL","reducer","state","action","type","loading","jobs","payload","error","hasNextPage","Job","job","useState","open","setOpen","Card","className","Body","Title","title","company","Subtitle","Date","created_at","toLocaleDateString","Badge","variant","location","style","wordBreak","source","how_to_apply","height","alt","src","company_logo","Text","Button","onClick","prevOpen","Collapse","in","description","JobsPagination","page","setPage","adjustPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","xs","Check","full_time","id","label","App","setParams","useReducer","dispatch","useEffect","cancelToken","axios","CancelToken","get","token","markdown","then","res","data","catch","e","isCancel","cancelToken1","length","cancel","useFetchJobs","Container","param","target","prevParams","map","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.668f46d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useReducer, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst ACTIONS = {\r\n    MAKE_REQUEST: 'make_request',\r\n    GET_DATA: 'get_data',\r\n    ERROR: 'error',\r\n    UPDATE_HAS_NEXT_PAGE: 'update_has_next_page'\r\n}\r\nconst BASE_URL = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json'\r\n\r\nfunction reducer(state, action){\r\n    switch(action.type){\r\n        case ACTIONS.MAKE_REQUEST:\r\n            return{ loading: true, jobs: [] }\r\n        case ACTIONS.GET_DATA:\r\n            return{ ...state, loading:false, jobs: action.payload.jobs }\r\n        case ACTIONS.ERROR:\r\n            return{ ...state, loading:false, error: action.payload.error, jobs: [] }\r\n        case ACTIONS.UPDATE_HAS_NEXT_PAGE:\r\n            return{...state, hasNextPage: action.payload.hasNextPage}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport default function useFetchJobs(params, page){\r\n    const [state, dispatch]= useReducer(reducer, { jobs: [], loading: true})\r\n    \r\n    useEffect(() => {\r\n        const cancelToken = axios.CancelToken.source()\r\n        dispatch({ type: ACTIONS.MAKE_REQUEST })\r\n        axios.get(BASE_URL, {\r\n            cancelToken: cancelToken.token,\r\n            params: { markdown: true, page: page, ...params }\r\n        }).then(res =>{\r\n            dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data }})\r\n        }).catch(e => {\r\n            if (axios.isCancel(e)) return\r\n            dispatch({ type: ACTIONS.ERROR, payload: { error: e }})\r\n        })\r\n        const cancelToken1 = axios.CancelToken.source()\r\n        axios.get(BASE_URL, {\r\n            cancelToken: cancelToken1.token,\r\n            params: { markdown: true, page: page + 1, ...params }\r\n        }).then(res =>{\r\n            dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: { hasNextPage: res.data.length !== 0 }})\r\n        }).catch(e => {\r\n            if (axios.isCancel(e)) return\r\n            dispatch({ type: ACTIONS.ERROR, payload: { error: e }})\r\n        })\r\n        return() => {\r\n            cancelToken.cancel()\r\n            cancelToken1.cancel()\r\n        }\r\n    }, [params, page])\r\n\r\n    return state\r\n}","import React from 'react';\r\nimport { Card, Badge, Button, Collapse } from 'react-bootstrap'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { useState } from 'react';\r\n\r\nexport default function Job({job}){\r\n   const [open, setOpen] = useState(false);\r\n    return ( \r\n        <Card className=\"mb-3\">\r\n            <Card.Body>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <div>\r\n                        <Card.Title>\r\n                        {job.title} - <spam className=\"text-muted font-weight-light\">{job.company}</spam>\r\n                        </Card.Title>\r\n                        <Card.Subtitle className=\"text-muted mb-2\">\r\n                            {new Date(job.created_at).toLocaleDateString()}\r\n                        </Card.Subtitle>\r\n                        <Badge variant=\"secondary\" className=\"mr-2\">{job.type}</Badge>\r\n                        <Badge variant=\"secondary\">{job.location}</Badge>\r\n                        <div style={{ wordBreak: 'break-all'}}>\r\n                            <ReactMarkdown source={job.how_to_apply} />\r\n                        </div>\r\n                    </div>\r\n                   <img className=\"d-none d-md-block\" height=\"50\" alt={job.company} src={job.company_logo}/>\r\n                </div>\r\n                <Card.Text>\r\n                    <Button onClick={() => setOpen(prevOpen => !prevOpen)} variant=\"primary\">{open ? 'Hide Details' : 'View Details' }</Button>\r\n                </Card.Text>\r\n                <Collapse in={open}>\r\n                    <div className=\"mt-4\">\r\n                        <ReactMarkdown source={job.description} />\r\n                    </div>\r\n                </Collapse>\r\n            </Card.Body>\r\n            \r\n        </Card>\r\n    )\r\n}","import React from 'react';\r\nimport { pagination, Pagination } from 'react-bootstrap'\r\nexport default function JobsPagination({page, setPage, hasNextPage}){\r\n\r\n    function adjustPage(amount){\r\n        setPage(prevPage => prevPage + amount)\r\n    }\r\n\r\n\r\n    return(\r\n        <Pagination>\r\n            {page !== 1 && <Pagination.Prev onClick={() => adjustPage(-1)} />}\r\n            {page !== 1 && <Pagination.Item onClick={() => setPage(1)}>1</Pagination.Item>}\r\n            {page > 2 && <Pagination.Ellipsis />}\r\n            {page > 2 && <Pagination.Item onClick={() => adjustPage(-1)}>{page - 1 }</Pagination.Item>}\r\n            <Pagination.Item active>{page}</Pagination.Item>\r\n            {hasNextPage && <Pagination.Item onClick={() => adjustPage(1)}>{page + 1}</Pagination.Item>}\r\n            {hasNextPage && <Pagination.Next onClick={() => adjustPage(1)} />}\r\n        </Pagination>\r\n    )\r\n}","import React from 'react'\r\nimport { Form, Col } from 'react-bootstrap'\r\n\r\nexport default function SearchForm({ params, onParamChange }) {\r\n  return (\r\n    <Form className=\"mb-4\">\r\n      <Form.Row className=\"align-items-end\">\r\n        <Form.Group as={Col}>\r\n          <Form.Label>Description</Form.Label>\r\n          <Form.Control onChange={onParamChange} value={params.description} name=\"description\" type=\"text\" />\r\n        </Form.Group>\r\n        <Form.Group as={Col}>\r\n          <Form.Label>Location</Form.Label>\r\n          <Form.Control onChange={onParamChange} value={params.location} name=\"location\" type=\"text\" />\r\n        </Form.Group>\r\n        <Form.Group as={Col} xs=\"auto\" className=\"ml-2\">\r\n          <Form.Check onChange={onParamChange} value={params.full_time} name=\"full_time\" id=\"full-time\" label=\"Only Full Time\" type=\"checkbox\" className=\"mb-2\" />\r\n        </Form.Group>\r\n      </Form.Row>\r\n    </Form>\r\n  )\r\n}","import React, { useState } from 'react';\nimport useFetchJobs from './useFetchJobs';\nimport { Container } from 'react-bootstrap';\nimport Job from './Job';\nimport JobsPagination from './JobsPagination';\nimport SearchForm from './SearchForm';\n\nfunction App(){\n  const [params, setParams] = useState({})\n  const [page, setPage] = useState(1)\n  const { jobs, loading, error, hasNextPage } = useFetchJobs(params, page)\n  \n  function handleParamChange(e) {\n    const param = e.target.name\n    const value = e.target.value\n    setPage(1)\n    setParams(prevParams => {\n      return { ...prevParams, [param]: value }\n    })\n  }\n\n\n  return(\n    <Container className=\"my-4\">\n      <h1 className=\"mb-4 text-center\">Get A Job</h1>\n      <SearchForm params={params} onParamChange={handleParamChange} />\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n      {loading && <h1>Loading</h1>}\n      {error && <h1>Error. Try Again</h1>}\n      {jobs.map(job => {\n        return <Job key = {job.id} job={job} />\n      })}\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n    </Container>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}